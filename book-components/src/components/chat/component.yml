---
id: chat
name: Chat
description: Interactive chat component that displays messages between multiple participants with support for user input, message history, and various chat scenarios.
category: Chat
tags:
    - chat
    - messaging
    - conversation
    - assistant
    - user-interaction
    - multi-participant
props:
    messages:
        type: ReadonlyArray<ChatMessage>
        description: Array of chat messages to display
    participants:
        type: ReadonlyArray<ChatParticipant>
        description: List of chat participants with their information (name, avatar, color, etc.)
    onMessage:
        type: '(messageContent: string) => Promise<void>'
        description: Callback function called when user sends a new message
    onReset:
        type: '() => Promise<void>'
        description: Optional callback to reset/clear the chat
    placeholderMessageContent:
        type: string
        default: 'Write a message'
        description: Placeholder text for the message input field
    defaultMessage:
        type: string
        description: Optional preset message content in the input field
    children:
        type: ReactNode
        description: Optional content to show in the chat header bar
    className:
        type: string
        description: Optional CSS class name for styling
    style:
        type: CSSProperties
        description: Optional inline CSS styles
    isVoiceRecognitionButtonShown:
        type: boolean
        default: false
        description: Whether to show the voice recognition button
    voiceLanguage:
        type: string
        default: 'en-US'
        description: Language code for voice recognition
    isVoiceCalling:
        type: boolean
        default: false
        description: Whether a voice call is currently active
features:
    - Real-time message display with scrolling
    - Multi-participant support with custom avatars and colors
    - User message input with send functionality
    - Chat reset capability
    - Loading/typing indicators
    - Voice call integration
    - Rating system for assistant messages
    - Responsive design for mobile and desktop
examples:
    - title: Empty Chat
      code: '<Chat messages={[]} participants={participants} onMessage={handleMessage} />'
    - title: Simple User-Assistant Chat
      code: |-
          <Chat
              messages={[
                  { id: '1', from: 'USER', content: 'Hello!', date: new Date(), isComplete: true },
                  { id: '2', from: 'ASSISTANT', content: 'Hi! How can I help?', date: new Date(), isComplete: true }
              ]}
              participants={participants}
              onMessage={handleMessage}
              onReset={handleReset}
          />
    - title: Multi-Participant Chat
      code: |-
          <Chat
              messages={multiParticipantMessages}
              participants={[
                  { name: 'USER', fullname: 'You', isMe: true, color: '#3b82f6' },
                  { name: 'ASSISTANT_1', fullname: 'AI Assistant', color: '#10b981' },
                  { name: 'ASSISTANT_2', fullname: 'Code Helper', color: '#f59e0b' }
              ]}
              onMessage={handleMessage}
              placeholderMessageContent="Ask multiple assistants..."
          />
    - title: Chat with Loading Message
      code: |-
          <Chat
              messages={[
                  { id: '1', from: 'USER', content: 'Question?', date: new Date(), isComplete: true },
                  { id: '2', from: 'ASSISTANT', content: 'Thinking...', date: new Date(), isComplete: false }
              ]}
              participants={participants}
              onMessage={handleMessage}
          />
    - title: Chat with children
      code: |-
          <Chat
              messages={[
                  { id: '1', from: 'USER', content: 'What is the meaning of life?', date: new Date(), isComplete: true },
                  { id: '2', from: 'ASSISTANT_1', content: "That's a deep question! The meaning of life is often considered to be 42.", date: new Date(), isComplete: true }
              ]}
              participants={participants}
              onMessage={handleMessage}
              onReset={handleReset}
          >
              <div>
                  <strong>Custom children content:</strong>
                  <span>This area is rendered above the chat messages and input.</span>
              </div>
          </Chat>
    - title: Chat with feedback
      code: |-
          <Chat
              messages={[
                  { id: '1', from: 'USER', content: 'Hello! Can you help me?', date: new Date(), isComplete: true },
                  { id: '2', from: 'ASSISTANT_1', content: 'Of course! What do you need help with?', date: new Date(), isComplete: true }
              ]}
              participants={participants}
              onMessage={handleMessage}
              onReset={handleReset}
              onFeedback={(feedbackData) => void console.info('Feedback received:', feedbackData)}
          />
