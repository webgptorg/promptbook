---
id: llm-chat
name: LLM Chat
description: Interactive chat component that connects to LLM Execution Tools for AI-powered conversations. Internally manages messages, participants, and task progress while using the provided LLM tools to generate responses.
category: Communication
tags:
    - chat
    - llm
    - ai
    - assistant
    - conversation
    - promptbook
    - execution-tools
props:
    llmTools:
        type: LlmExecutionTools
        description: LLM execution tools for chatting with the model (e.g., MockedEchoLlmExecutionTools, OpenAI tools, etc.)
        required: true
    onChange:
        type: '(messages: ReadonlyArray<ChatMessage>, participants: ReadonlyArray<ChatParticipant>) => void'
        description: Called when the chat state changes (messages, participants, etc.)
    onReset:
        type: '() => Promise<void>'
        description: Optional callback to reset/clear the chat - when provided, reset button will be shown
    placeholderMessageContent:
        type: string
        default: 'Write a message'
        description: Placeholder text for the message input field
    defaultMessage:
        type: string
        description: Optional preset message content in the input field
    children:
        type: ReactNode
        description: Optional content to show in the chat header bar
    className:
        type: string
        description: Optional CSS class name for styling
    style:
        type: CSSProperties
        description: Optional inline CSS styles
    isVoiceRecognitionButtonShown:
        type: boolean
        default: false
        description: Whether to show the voice recognition button
    voiceLanguage:
        type: string
        default: 'en-US'
        description: Language code for voice recognition
    isVoiceCalling:
        type: boolean
        default: false
        description: Whether a voice call is currently active
    isExperimental:
        type: boolean
        default: false
        description: Whether experimental features are enabled (required for voice calling)
    isSaveButtonEnabled:
        type: boolean
        default: false
        description: Whether the save button is enabled and shown
    exportHeaderMarkdown:
        type: string
        description: Optional markdown header to include at the top of exported files
    onUseTemplate:
        type: '() => void'
        description: Optional callback to create a new agent from the template - renders [Use this template] button when provided
    voiceCallProps:
        type: object
        description: Voice call configuration object with selectedModel, providerClients, etc.
features:
    - Automatic LLM integration via LlmExecutionTools
    - Internal state management for messages and participants
    - Task progress tracking during LLM calls
    - Loading states and error handling
    - Participant generation from LLM tools
    - All Chat component features (reset, voice, etc.)
    - Support for any LLM provider (OpenAI, Azure, Anthropic, mocked, etc.)
examples:
    - title: Basic LLM Chat
      code: |-
          const llmTools = new MockedEchoLlmExecutionTools({ isVerbose: true });

          <LlmChat
              llmTools={llmTools}
              placeholderMessageContent="Ask the AI anything..."
          />
    - title: LLM Chat with Change Handler
      code: |-
          const llmTools = new OpenAiExecutionTools({ apiKey: 'your-key' });

          <LlmChat
              llmTools={llmTools}
              onChange={(messages, participants) => {
                  console.log('Chat updated:', messages.length, 'messages');
              }}
              placeholderMessageContent="Chat with OpenAI..."
          />
    - title: LLM Chat with Reset
      code: |-
          const llmTools = new MockedEchoLlmExecutionTools();

          <LlmChat
              llmTools={llmTools}
              onReset={async () => {
                  console.log('Chat reset');
              }}
              placeholderMessageContent="Chat with reset button..."
          />
    - title: LLM Chat with Header
      code: |-
          <LlmChat
              llmTools={llmTools}
              style={{ height: '500px' }}
          >
              <div className="p-2 bg-blue-100">
                  <h3>AI Assistant Chat</h3>
                  <p>Powered by {llmTools.title}</p>
              </div>
          </LlmChat>
