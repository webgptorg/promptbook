{
    "iife": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "Immediately Invoked Function Expression",
        "description": "Immediately Invoked Function Expression",
        "body": ["((async ()=>{/*Do some stuff*/})())"]
    },
    "catch": {
        "scope": "javascript,javascriptreact,typescript,typescriptreact",
        "prefix": "Catch error instanceof Error",
        "description": "Immediately Invoked Function Expression",
        "body": ["assertsError(error);"]
    },
    "eslint-disable": {
        "scope": "typescript,typescriptreact",
        "prefix": "Disable ES Lint",
        "description": "Disable ES Lint",
        "body": ["// eslint-disable-next-line $1"]
    },
    "css-testing-outline": {
        "scope": "typescript,typescriptreact,javascript,html,css",
        "prefix": "CSS testing outline",
        "description": "For draw the outline",
        "body": ["/**/", "outline: 1px dotted red; /**/"]
    },
    "test": {
        "scope": "typescript",
        "prefix": "Function with unit test",
        "description": "Test+Implementation of one function ready to AI development",
        "body": [
            "import { describe, expect, it } from '@jest/globals';",
            "import { spaceTrim } from 'spacetrim';",
            "import { just } from '../just';",
            "",
            "describe('how `$1` works', () => {",
            "    it('should work with foo', () => ",
            "        expect(",
            "            $1(",
            "                spaceTrim(`",
            "                    Foo",
            "        ",
            "                    Bar",
            "        ",
            "                    Baz",
            "                `),",
            "            ),",
            "        ).toBe(",
            "            just(",
            "                spaceTrim(`",
            "                    Foo",
            "        ",
            "                    Bar",
            "        ",
            "                    Baz",
            "                `),",
            "            ),",
            "        )",
            "    );",
            "",
            "    it('should NOT work with bar', () => ",
            "        expect(",
            "            $1(",
            "                spaceTrim(`",
            "                    bar",
            "                `),",
            "            ),",
            "        ).toBe(false)",
            "    );",
            "});",
            "",
            "/**",
            " * Function `$1` will @@@",
            " *",
            " * @private within the repository <- TODO: !! Take just one of",
            " * @public exported from @@@",
            " */",
            "export function $1(value: string): boolean {",
            "    // TODO: !! Implement the function",
            "    return value === 'Foo';",
            "}",
            "",
            "",
            "/**",
            " * TODO: !! Extract `$1` to separate file",
            " */"
        ]
    }
}
