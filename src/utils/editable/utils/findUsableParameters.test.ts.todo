
// TODO: [ðŸ‘œ] This probbably does not make sence because in TaskJson already are listed dependencies

import { describe, expect, it } from '@jest/globals';
import { importPipeline } from '../validation/_importPipeline';
import { PipelineJson } from '../../types/PipelineJson/PipelineJson';
import { TaskJson } from '../../types/PipelineJson/TaskJson';
import { TaskParameterJson } from '../../types/PipelineJson/TaskParameterJson';

describe('how findUsableParameters works', () => {
    it('should find no usable parameter', () => {
        const promptbook = importPipeline(`50-advanced.bookc`);
        const task = promptbook.tasks[0];

        expect(findUsableParameters({ promptbook, task })).toBe([]);
    });
});

type FindUsableParametersOptions = {
    /**
     * Promptbook to search for usable parameters
     */
    promptbook: PipelineJson;

    /**
     * Task that searches for potentially usable parameters
     */
    task: TaskJson;
};

/**
 * Function `findUsableParameters` will find all usable parameters for given task
 * In other words, it will find all parameters that are not used in the task itseld and all its dependencies
 *
 * @public exported from `@promptbook/editable`
 */
export function findUsableParameters(options: FindUsableParametersOptions): ReadonlyArray<TaskParameterJson> {
    const { promptbook, task } = options;

    const usableParameters: ReadonlyArray<TaskParameterJson> = [];

    return usableParameters;
}
