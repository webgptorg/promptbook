import type { ChatMessage } from '../interfaces/ChatMessage';

export type ExportFormat = 'pdf' | 'txt' | 'md' | 'html' | 'json';

/**
 * Generates Promptbook branding header for exported files
 */
function getPromptbookBranding(shareUrl: string): string {
    const timestamp = new Date().toLocaleString();
    return `Generated by Promptbook Studio - ${timestamp}\nShare link: ${shareUrl}\nhttps://promptbook.studio\n\n`;
}

/**
 * Utility: add UTM parameters to a URL for tracking
 */
function addUtmParamsToUrl(baseUrl: string, format: ExportFormat): string {
    const urlObj = new URL(baseUrl);
    const params = new URLSearchParams(urlObj.search);
    if (!params.has('utm_source')) params.set('utm_source', 'promptbook-studio');
    params.set('utm_medium', 'export');
    params.set('utm_campaign', 'chat-history-share');
    params.set('utm_content', format);
    urlObj.search = params.toString();
    return urlObj.toString();
}

/**
 * Utility: generate a shortcode for ptbk.io
 */
function generateShortCode(length = 7): string {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

/**
 * Create a short link for chat sharing.
 * Simplified version without Supabase dependency.
 */
async function createShortLinkForChat(utmUrl: string): Promise<string> {
    // Simplified implementation - just return the UTM URL
    // In a full implementation, this would create a short link via API
    console.info('Short link would be created for:', utmUrl);
    return utmUrl;
}

/**
 * Utility: generate a QR code data URL for a given text
 * Simplified version without QR code library dependency
 */
async function generateQrDataUrl(text: string): Promise<string | null> {
    // Simplified implementation - would need QR code library in production
    console.info('QR code would be generated for:', text);
    return null;
}

const PROMPTBOOK_LOGO_URL = 'https://promptbook.studio/logos/logo-blue-white-256.png';

/**
 * Simple HTML escape to safely render injected text in HTML exports
 */
function escapeHtml(text: string): string {
    return text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}

/**
 * Converts chat messages to plain text format
 */
function messagesToText(
    messages: ChatMessage[],
    shareUrl: string,
    headerMarkdown?: string,
    participants?: Record<string, { name: string; avatarUrl?: string }>,
): string {
    const branding = getPromptbookBranding(shareUrl);
    const header = headerMarkdown ? `${headerMarkdown}\n\n` : '';
    const content = messages
        .map((message) => {
            const from = (message as any).from as string;
            const sender =
                (participants && participants[from]?.name) ||
                (from === 'USER' || from === 'AGENT_user' ? 'You' : 'Assistant');
            return `${sender}:\n${message.content}\n`;
        })
        .join('\n');

    return header + branding + content;
}

/**
 * Converts chat messages to Markdown format
 */
function messagesToMarkdown(
    messages: ChatMessage[],
    shareUrl: string,
    qrDataUrl?: string | null,
    headerMarkdown?: string,
    participants?: Record<string, { name: string; avatarUrl?: string }>,
): string {
    const branding = getPromptbookBranding(shareUrl);
    const headerParts: string[] = [];
    headerParts.push(`[![Promptbook](${PROMPTBOOK_LOGO_URL})](${shareUrl})`);
    headerParts.push('');
    headerParts.push(`Share this chat: ${shareUrl}`);
    if (qrDataUrl) {
        headerParts.push('');
        headerParts.push(`![Chat QR code](${qrDataUrl})`);
    }
    headerParts.push('');

    const content = messages
        .map((message) => {
            const from = (message as any).from as string;
            const name =
                (participants && participants[from]?.name) ||
                (from === 'USER' || from === 'AGENT_user' ? 'You' : 'Assistant');
            const avatar = participants && participants[from]?.avatarUrl;
            const senderMd = `**${name}**`;
            const avatarMd = avatar ? `![${name}](${avatar}) ` : '';
            return `${avatarMd}${senderMd}:\n\n${message.content}\n`;
        })
        .join('\n---\n\n');

    return `${headerParts.join('\n')}\n${headerMarkdown ? headerMarkdown + '\n\n' : ''}# Chat History\n\n${branding}${content}`;
}

/**
 * Converts chat messages to HTML format
 */
function messagesToHtml(
    messages: ChatMessage[],
    shareUrl: string,
    qrDataUrl?: string | null,
    headerMarkdown?: string,
    participants?: Record<string, { name: string; avatarUrl?: string }>,
): string {
    const branding = getPromptbookBranding(shareUrl);
    const customHeaderHtml = headerMarkdown ? `<div class="customHeader">${escapeHtml(headerMarkdown)}</div>` : '';
    const content = messages
        .map((message) => {
            const from = (message as any).from as string;
            const isUser = from === 'USER' || (typeof from === 'string' && from.toLowerCase() === 'agent_user');
            const senderClass = isUser ? 'user' : 'assistant';
            const name =
                (participants && participants[from]?.name) || (isUser ? 'You' : 'Assistant');
            const avatar = participants && participants[from]?.avatarUrl;
            const messageContent = message.content
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/\n/g, '<br>');

            return `
                <div class="message ${senderClass}">
                    <div class="senderRow">
                        ${avatar ? `<img class="avatar" src="${avatar}" alt="${escapeHtml(name)}"/>` : ''}
                        <div class="sender">${escapeHtml(name)}:</div>
                    </div>
                    <div class="content">${messageContent}</div>
                </div>
            `;
        })
        .join('');

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat History - Promptbook Studio</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .header {
            text-align: center;
            margin-bottom: 24px;
            padding: 16px;
            background: linear-gradient(135deg, #0084ff 0%, #0066cc 100%);
            color: white;
            border-radius: 12px;
        }
        .brand {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 16px;
            margin-bottom: 8px;
        }
        .brand-logo {
            height: 48px;
            width: auto;
            border-radius: 8px;
            background: rgba(255,255,255,0.9);
            padding: 6px;
        }
        .share {
            text-align: center;
            margin: 8px 0;
            font-size: 14px;
        }
        .share a {
            color: #0b6cff;
            text-decoration: underline;
            word-break: break-all;
        }
        .qr {
            text-align: center;
            margin: 8px 0 16px 0;
        }
        .qr img {
            width: 160px;
            height: 160px;
            image-rendering: pixelated;
            background: white;
            padding: 8px;
            border-radius: 8px;
            border: 1px solid #e1e5e9;
        }
        .customHeader {
            white-space: pre-wrap;
            margin: 8px auto 0 auto;
            max-width: 800px;
            background: rgba(255, 255, 255, 0.95);
            color: #222;
            padding: 12px;
            border-radius: 8px;
            border: 1px solid #e1e5e9;
        }
        .branding {
            font-size: 14px;
            color: #666;
            margin-bottom: 20px;
            text-align: center;
            white-space: pre-line;
        }
        .message {
            margin-bottom: 20px;
            padding: 16px;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .message.user {
            background: linear-gradient(135deg, #0084ff 0%, #0066cc 100%);
            color: white;
            margin-left: 20%;
        }
        .message.assistant {
            background: white;
            border: 1px solid #e1e5e9;
            margin-right: 20%;
        }
        .senderRow {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
        }
        .avatar {
            width: 28px;
            height: 28px;
            border-radius: 50%;
            object-fit: cover;
            border: 1px solid #e1e5e9;
            background: white;
        }
        .sender {
            font-weight: 600;
        }
        .content {
            line-height: 1.5;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="brand">
            <a href="${shareUrl}" target="_blank" rel="noopener">
                <img class="brand-logo" src="${PROMPTBOOK_LOGO_URL}" alt="Promptbook logo"/>
            </a>
        </div>
        <div class="share">
            <a href="${shareUrl}" target="_blank" rel="noopener">${shareUrl}</a>
        </div>
        ${qrDataUrl ? `<div class="qr"><img src="${qrDataUrl}" alt="Chat QR code"/></div>` : ''}
        ${customHeaderHtml}
        <h1>Chat History</h1>
        <p>Exported from Promptbook Studio</p>
    </div>
    <div class="branding">${branding}</div>
    <div class="messages">
        ${content}
    </div>
</body>
</html>
    `.trim();
}

/**
 * Converts chat messages to JSON format
 */
function messagesToJson(messages: ChatMessage[], shareUrl: string): string {
    const exportData = {
        metadata: {
            exportedBy: 'Promptbook Studio',
            exportedAt: new Date().toISOString(),
            website: 'https://promptbook.studio',
            messageCount: messages.length,
            shareUrl,
        },
        messages: messages.map((message, index) => ({
            id: message.id || `msg_${index}`,
            from: message.from,
            content: message.content,
            isComplete: message.isComplete,
            timestamp: new Date().toISOString() // Note: Real timestamp would come from message data
        }))
    };

    return JSON.stringify(exportData, null, 2);
}

/**
 * Generates PDF content using HTML and triggers print dialog
 */
function generatePdfContent(
    messages: ChatMessage[],
    shareUrl: string,
    qrDataUrl?: string | null,
    headerMarkdown?: string,
    participants?: Record<string, { name: string; avatarUrl?: string }>
): void {
    const htmlContent = messagesToHtml(messages, shareUrl, qrDataUrl, headerMarkdown, participants);

    // Create a new window with the HTML content
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
        alert('Please allow popups to print the chat history');
        return;
    }

    printWindow.document.write(htmlContent);
    printWindow.document.close();

    // Wait for content to load, then trigger print dialog
    printWindow.onload = () => {
        setTimeout(() => {
            printWindow.print();
            printWindow.close();
        }, 500);
    };
}

/**
 * Downloads a file with the given content and filename
 */
function downloadFile(content: string, filename: string, mimeType: string): void {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);

    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Clean up the URL object
    setTimeout(() => URL.revokeObjectURL(url), 100);
}

/**
 * Exports chat messages in the specified format
 */
export async function exportChatHistory(
    messages: ChatMessage[],
    format: ExportFormat,
    headerMarkdown?: string,
    participants?: Record<string, { name: string; avatarUrl?: string }>
): Promise<void> {
    const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format
    const baseFilename = `chat-history-${timestamp}`;

    const currentUrl = window.location.href;
    const utmUrl = addUtmParamsToUrl(currentUrl, format);
    const shareUrl = await createShortLinkForChat(utmUrl);

    const needsQr = format === 'pdf' || format === 'md' || format === 'html';
    const qrDataUrl = needsQr ? await generateQrDataUrl(shareUrl) : null;

    switch (format) {
        case 'txt':
            downloadFile(
                messagesToText(messages, shareUrl, headerMarkdown, participants),
                `${baseFilename}.txt`,
                'text/plain'
            );
            break;

        case 'md':
            downloadFile(
                messagesToMarkdown(messages, shareUrl, qrDataUrl, headerMarkdown, participants),
                `${baseFilename}.md`,
                'text/markdown'
            );
            break;

        case 'html':
            downloadFile(
                messagesToHtml(messages, shareUrl, qrDataUrl, headerMarkdown, participants),
                `${baseFilename}.html`,
                'text/html'
            );
            break;

        case 'json':
            downloadFile(
                messagesToJson(messages, shareUrl),
                `${baseFilename}.json`,
                'application/json'
            );
            break;

        case 'pdf':
            generatePdfContent(messages, shareUrl, qrDataUrl, headerMarkdown, participants);
            break;

        default:
            console.error('Unsupported export format:', format);
    }
}
