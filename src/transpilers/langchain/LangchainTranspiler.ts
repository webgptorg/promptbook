import { spaceTrim } from 'spacetrim';
import { TODO_any } from '../../_packages/types.index';
import { compilePipeline } from '../../conversion/compilePipeline';
import type { PipelineJson } from '../../pipeline/PipelineJson/PipelineJson';
import type { TaskJson } from '../../pipeline/PipelineJson/TaskJson';
import type { PipelineString } from '../../pipeline/PipelineString';
import { TODO_USE } from '../../utils/organization/TODO_USE';
import type { BookTranspilerDefinition } from '../_common/BookTranspilerDefinition';

/**
 * Transpiler to Python code using LangChain library.
 */
export const LangchainTranspiler: BookTranspilerDefinition = {
    name: 'langchain',
    title: 'LangChain',
    // TODO: [ðŸ§ ] packageName and className
    packageName: '@promptbook/langchain-transpiler',
    className: 'LangchainTranspiler',
    new: (tools) => async (book, _options) => {
        TODO_USE(_options);

        const pipeline = await compilePipeline(book as PipelineString, tools);

        const anouncement = spaceTrim(
            () => `
                """
                This code was generated by Promptbook
                @see https://promptbook.studio

                From book: ${pipeline.pipelineUrl}

                WARNING: This code is experimental and may not work as expected.
                """
            `,
        );

        const imports = spaceTrim(
            () => `
                from langchain_openai import ChatOpenAI
                from langchain_core.prompts import ChatPromptTemplate
            `,
        );

        const functions = pipeline.tasks.map((template) => transpileTemplate(template, pipeline));

        return spaceTrim(
            () => `
                ${anouncement}

                ${imports}

                ${functions.join('\n\n')}
            `,
        );
    },
};

function transpileTemplate(template: TaskJson, pipeline: PipelineJson): string {
    // TODO: Better template type detection
    if (
        (template as TODO_any).taskType === 'PROMPT_TEMPLATE' &&
        (template as TODO_any).modelRequirements.modelVariant === 'CHAT'
    ) {
        // TODO: DRY
        const functionName = template.name;
        const parameters = pipeline.parameters.filter((parameter) => parameter.isInput);
        const parameterNames = parameters.map((parameter) => parameter.name);
        const parameterNamesAndTypes = parameterNames.map((name) => `${name}: str`).join(', ');
        const interpolatedContent = interpolateTemplate((template as TODO_any).content, parameterNames);

        return spaceTrim(
            () => `
                def ${functionName}(${parameterNamesAndTypes}):
                    chat = ChatOpenAI(model="${(template as TODO_any).modelRequirements.modelName}", temperature=0.7)
                    prompt = ChatPromptTemplate.from_messages([
                        ("human", ${interpolatedContent})
                    ])
                    chain = prompt | chat
                    return chain.invoke({${parameterNames.map(name => `'${name}': ${name}`).join(', ')}})
            `,
        );
    } else {
        return `# TODO: ${(template as TODO_any).taskType} templates are not implemented yet`;
    }
}

function interpolateTemplate(template: string, parameterNames: string[]): string {
    let result = template;
    for (const parameterName of parameterNames) {
        result = result.replace(new RegExp(`{${parameterName}}`, 'g'), `{${parameterName}}`);
    }
    return `f"${result}"`;
}
